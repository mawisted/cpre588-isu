//////////////////////////////////////////////////////////////////////
// C++ source file generated by SpecC V2.2.1
// Design: GreenhouseArch2
// File:   GreenhouseArch2.cc
// Time:   Sun May  9 18:25:41 2010
//////////////////////////////////////////////////////////////////////

// Note: User-defined include files are inlined in this file.

// Note: System-defined include files are inlined in this file.

#include "GreenhouseArch2.h"


unsigned int _IDcnt = 0;
// variable definitions //////////////////////////////////////////////

#line 16 "tb.sc"
const unsigned long int SIZE = 10ul;
const unsigned long int MSize = 10ul;

#line 23 "GreenhouseArch2.cc"
unsigned int __PRF_globalCounter[73];

// channel class definitions /////////////////////////////////////////

c_double_handshake::c_double_handshake()
    : _specc::channel(),
    v(false),
    w(false)
{   /* nothing */
}

c_double_handshake::~c_double_handshake(void)
{   /* nothing */
}

#line 81 "c_double_handshake.sc"
void c_double_handshake::receive(void *d, unsigned long int l)
{   
    if ( !v)
    {   
	w = true;
	_specc::wait(event(&req), ((void*)0));
	w = false;
    }
    if (l != tmpl)
    {   
	abort();
    }
    memcpy(d, tmpd, l);
    v = false;
    _specc::notify(event(&ack), ((void*)0));
    _specc::wait(event(&ack), ((void*)0));
}

void c_double_handshake::send(const void *d, unsigned long int l)
{   
    tmpd = d;
    tmpl = l;
    v = true;
    if (w)
    {   
	_specc::notify(event(&req), ((void*)0));
    }
    _specc::wait(event(&ack), ((void*)0));
}

#line 70 "GreenhouseArch2.cc"
c_handshake::c_handshake()
    : _specc::channel(),
    f(false),
    w(false)
{   /* nothing */
}

c_handshake::~c_handshake(void)
{   /* nothing */
}

#line 62 "c_handshake.sc"
void c_handshake::receive(void)
{   
    if ( !f)
    {   
	w = true;
	_specc::wait(event(&e), ((void*)0));
	w = false;
    }
    f = false;
}

void c_handshake::send(void)
{   
    if (w)
    {   
	_specc::notify(event(&e), ((void*)0));
    }
    f = true;
}

#line 103 "GreenhouseArch2.cc"
c_queue::c_queue(const unsigned long int (&size))
    : _specc::channel(), size(size),
    buffer(0),
    n(0ul),
    p(0ul),
    wr(0ul),
    ws(0ul)
{   /* nothing */
}

c_queue::~c_queue(void)
{   /* nothing */
}

#line 99 "c_queue.sc"
void c_queue::cleanup(void)
{   
    if ( !n)
    {   
	free(buffer);
	buffer = 0;
    }
}

void c_queue::receive(void *d, unsigned long int l)
{   
    unsigned long int p0;

    while(l > n)
    {   
	wr++ ;
	_specc::wait(event(&r), ((void*)0));
	wr-- ;
    }

    if (n <= p)
    {   
	p0 = p - n;
    }
    else 
    {   
	p0 = p + size - n;
    }
    if (l <= size - p0)
    {   
	memcpy(d,  &buffer[p0], l);
	n -= l;
    }
    else 
    {   
	memcpy(d,  &buffer[p0], size - p0);
	memcpy(((char *)d) + (size - p0),  &buffer[0], l - (size - p0));
	n -= l;
    }

    if (ws)
    {   
	_specc::notify(event(&s), ((void*)0));
    }

    cleanup();
}

void c_queue::send(const void *d, unsigned long int l)
{   
    while(l > size - n)
    {   
	ws++ ;
	_specc::wait(event(&s), ((void*)0));
	ws-- ;
    }

    setup();

    if (l <= size - p)
    {   
	memcpy( &buffer[p], d, l);
	p += l;
	n += l;
    }
    else 
    {   
	memcpy( &buffer[p], d, size - p);
	memcpy( &buffer[0], ((char *)d) + (size - p), l - (size - p));
	p = l - (size - p);
	n += l;
    }

    if (wr)
    {   
	_specc::notify(event(&r), ((void*)0));
    }
}

#line 87 "c_queue.sc"
void c_queue::setup(void)
{   
    if ( !buffer)
    {   
	if ( !(buffer = (char *)malloc(size)))
	{   
	    perror("c_queue");
	    abort();
	}
    }
}

// behavior class definitions ////////////////////////////////////////

#line 213 "GreenhouseArch2.cc"
heatcontrol::heatcontrol(unsigned int _idcnt, i_receiver (&tempdatain), i_sender (&heatcontrolout))
    : _specc::behavior(_idcnt), tempdatain(tempdatain), heatcontrolout(heatcontrolout)
{   /* nothing */
}

heatcontrol::~heatcontrol(void)
{   /* nothing */
}

void heatcontrol::main(void)

#line 21 "./HeatControl.sc"
{   
    int command; int h;

#line 229 "GreenhouseArch2.cc"
    __PRF_globalCounter[37u]++ ;
    _specc::waitfor(1866666ull);
    __PRF_globalCounter[38u]++ ;

#line 24 "./HeatControl.sc"
    while(1)
    {   

#line 238 "GreenhouseArch2.cc"
	__PRF_globalCounter[39u]++ ;
	__PRF_channelAccess(17256u, sizeof (h));

#line 26 "./HeatControl.sc"
	tempdatain.receive( &h, sizeof (h));

#line 245 "GreenhouseArch2.cc"
	__PRF_globalCounter[40u]++ ;

#line 27 "./HeatControl.sc"
	if (h == 0)

#line 251 "GreenhouseArch2.cc"
	{   
	    __PRF_globalCounter[41u]++ ;

#line 28 "./HeatControl.sc"
	    command = 1;
	}
	else 

#line 260 "GreenhouseArch2.cc"
	{   
	    __PRF_globalCounter[42u]++ ;

#line 30 "./HeatControl.sc"
	    command = 0;
	}

#line 268 "GreenhouseArch2.cc"
	__PRF_globalCounter[43u]++ ;

#line 31 "./HeatControl.sc"
	_specc::waitfor((10));

#line 274 "GreenhouseArch2.cc"
	__PRF_channelAccess(17129u, sizeof (command));

#line 32 "./HeatControl.sc"
	heatcontrolout.send( &command, sizeof (command));
    }
}

#line 282 "GreenhouseArch2.cc"
moistprocessing::moistprocessing(unsigned int _idcnt, i_receiver (&moistsettingsin), i_receiver (&moistdatain), i_sender (&moistdatacontrol), i_sender (&moistdataout))
    : _specc::behavior(_idcnt), moistsettingsin(moistsettingsin), moistdatain(moistdatain), moistdatacontrol(moistdatacontrol), moistdataout(moistdataout)
{   /* nothing */
}

moistprocessing::~moistprocessing(void)
{   /* nothing */
}

void moistprocessing::main(void)

#line 18 "./MoistProcessing.sc"
{   
    int command; int h1; int moistset;

#line 298 "GreenhouseArch2.cc"
    __PRF_globalCounter[44u]++ ;
    _specc::waitfor(20166666ull);
    __PRF_channelAccess(18256u, sizeof (moistset));

#line 21 "./MoistProcessing.sc"
    moistsettingsin.receive( &moistset, sizeof (moistset));

#line 306 "GreenhouseArch2.cc"
    __PRF_globalCounter[45u]++ ;

#line 22 "./MoistProcessing.sc"
    while(1) {

#line 312 "GreenhouseArch2.cc"
	__PRF_globalCounter[46u]++ ;
	__PRF_channelAccess(18257u, sizeof (h1));

#line 23 "./MoistProcessing.sc"
	moistdatain.receive( &h1, sizeof (h1));

#line 319 "GreenhouseArch2.cc"
	__PRF_globalCounter[47u]++ ;

#line 25 "./MoistProcessing.sc"
	if ((h1 - moistset) > ( -1.000000000000000e+00))

#line 325 "GreenhouseArch2.cc"
	{   
	    __PRF_globalCounter[48u]++ ;

#line 26 "./MoistProcessing.sc"
	    command = 1;
	}
	else 

#line 334 "GreenhouseArch2.cc"
	{   
	    __PRF_globalCounter[49u]++ ;

#line 28 "./MoistProcessing.sc"
	    command = 0;
	}

#line 342 "GreenhouseArch2.cc"
	__PRF_globalCounter[50u]++ ;
	__PRF_channelAccess(18130u, sizeof (command));

#line 30 "./MoistProcessing.sc"
	moistdatacontrol.send( &command, sizeof (command));

#line 349 "GreenhouseArch2.cc"
	__PRF_channelAccess(18131u, sizeof (h1));

#line 31 "./MoistProcessing.sc"
	moistdataout.send( &h1, sizeof (h1));
    }
}

#line 357 "GreenhouseArch2.cc"
temp_receiver::temp_receiver(unsigned int _idcnt, i_receiver (&temp))
    : _specc::behavior(_idcnt), temp(temp)
{   /* nothing */
}

temp_receiver::~temp_receiver(void)
{   /* nothing */
}

void temp_receiver::main()

#line 21 "./Monitor.sc"
{   

    struct _IO_FILE *f1;
    int count; int data;

#line 375 "GreenhouseArch2.cc"
    __PRF_globalCounter[62u]++ ;

#line 26 "./Monitor.sc"
    count = 0;
    f1 = fopen("tempout.txt", "w");

#line 382 "GreenhouseArch2.cc"
    __PRF_globalCounter[63u]++ ;

#line 29 "./Monitor.sc"
    while(count <= 29) {

#line 388 "GreenhouseArch2.cc"
	__PRF_globalCounter[64u]++ ;
	__PRF_channelAccess(21256u, sizeof (data));

#line 30 "./Monitor.sc"
	temp.receive( &data, sizeof (data));
	fprintf(f1, "%i\n", data);
	count++ ;
    }

#line 398 "GreenhouseArch2.cc"
    __PRF_globalCounter[65u]++ ;

#line 34 "./Monitor.sc"
    fclose(f1);
    exit(0);
}

#line 406 "GreenhouseArch2.cc"
moisture_receiver::moisture_receiver(unsigned int _idcnt, i_receiver (&moisture))
    : _specc::behavior(_idcnt), moisture(moisture)
{   /* nothing */
}

moisture_receiver::~moisture_receiver(void)
{   /* nothing */
}

void moisture_receiver::main()

#line 41 "./Monitor.sc"
{   
    struct _IO_FILE *f1;
    int count; int data;

#line 423 "GreenhouseArch2.cc"
    __PRF_globalCounter[51u]++ ;

#line 45 "./Monitor.sc"
    count = 0;
    f1 = fopen("moistout.txt", "w");

#line 430 "GreenhouseArch2.cc"
    __PRF_globalCounter[52u]++ ;

#line 48 "./Monitor.sc"
    while(count <= 29) {

#line 436 "GreenhouseArch2.cc"
	__PRF_globalCounter[53u]++ ;
	__PRF_channelAccess(19256u, sizeof (data));

#line 49 "./Monitor.sc"
	moisture.receive( &data, sizeof (data));
	fprintf(f1, "%i\n", data);
	count++ ;
    }

#line 446 "GreenhouseArch2.cc"
    __PRF_globalCounter[54u]++ ;

#line 53 "./Monitor.sc"
    fclose(f1);
    exit(0);
}

#line 454 "GreenhouseArch2.cc"
Heater_Flag::Heater_Flag(unsigned int _idcnt, i_receiver (&Heater))
    : _specc::behavior(_idcnt), Heater(Heater)
{   /* nothing */
}

Heater_Flag::~Heater_Flag(void)
{   /* nothing */
}

void Heater_Flag::main()

#line 61 "./Monitor.sc"
{   
    struct _IO_FILE *f1;
    int count; int data;

#line 471 "GreenhouseArch2.cc"
    __PRF_globalCounter[4u]++ ;

#line 65 "./Monitor.sc"
    count = 0;
    f1 = fopen("heaterout.txt", "w");

#line 478 "GreenhouseArch2.cc"
    __PRF_globalCounter[5u]++ ;

#line 68 "./Monitor.sc"
    while(count <= 29) {

#line 484 "GreenhouseArch2.cc"
	__PRF_globalCounter[6u]++ ;
	__PRF_channelAccess(4256u, sizeof (data));

#line 69 "./Monitor.sc"
	Heater.receive( &data, sizeof (data));

#line 491 "GreenhouseArch2.cc"
	__PRF_globalCounter[7u]++ ;

#line 70 "./Monitor.sc"
	if (data == 1)

#line 497 "GreenhouseArch2.cc"
	{   
	    __PRF_globalCounter[8u]++ ;

#line 71 "./Monitor.sc"
	    fprintf(f1, "Heater On\n");
	}
	else 

#line 506 "GreenhouseArch2.cc"
	{   
	    __PRF_globalCounter[9u]++ ;

#line 73 "./Monitor.sc"
	    fprintf(f1, "Heater Off\n");
	}

#line 514 "GreenhouseArch2.cc"
	__PRF_globalCounter[10u]++ ;

#line 74 "./Monitor.sc"
	count++ ;
    }

#line 521 "GreenhouseArch2.cc"
    __PRF_globalCounter[11u]++ ;

#line 76 "./Monitor.sc"
    fclose(f1);
    exit(0);
}

#line 529 "GreenhouseArch2.cc"
Sprinkler_Flag::Sprinkler_Flag(unsigned int _idcnt, i_receiver (&Sprinkler))
    : _specc::behavior(_idcnt), Sprinkler(Sprinkler)
{   /* nothing */
}

Sprinkler_Flag::~Sprinkler_Flag(void)
{   /* nothing */
}

void Sprinkler_Flag::main()

#line 84 "./Monitor.sc"
{   
    struct _IO_FILE *f1;
    int count; int data;

#line 546 "GreenhouseArch2.cc"
    __PRF_globalCounter[23u]++ ;

#line 88 "./Monitor.sc"
    count = 0;
    f1 = fopen("sprinklerout.txt", "w");

#line 553 "GreenhouseArch2.cc"
    __PRF_globalCounter[24u]++ ;

#line 91 "./Monitor.sc"
    while(count <= 29) {

#line 559 "GreenhouseArch2.cc"
	__PRF_globalCounter[25u]++ ;
	__PRF_channelAccess(13256u, sizeof (data));

#line 92 "./Monitor.sc"
	Sprinkler.receive( &data, sizeof (data));

#line 566 "GreenhouseArch2.cc"
	__PRF_globalCounter[26u]++ ;

#line 93 "./Monitor.sc"
	if (data == 1)

#line 572 "GreenhouseArch2.cc"
	{   
	    __PRF_globalCounter[27u]++ ;

#line 94 "./Monitor.sc"
	    fprintf(f1, "Sprinker On\n");
	}
	else 

#line 581 "GreenhouseArch2.cc"
	{   
	    __PRF_globalCounter[28u]++ ;

#line 96 "./Monitor.sc"
	    fprintf(f1, "Sprinkler Off\n");
	}

#line 589 "GreenhouseArch2.cc"
	__PRF_globalCounter[29u]++ ;

#line 97 "./Monitor.sc"
	count++ ;
    }

#line 596 "GreenhouseArch2.cc"
    __PRF_globalCounter[30u]++ ;

#line 99 "./Monitor.sc"
    fclose(f1);
    exit(0);
}

#line 604 "GreenhouseArch2.cc"
Monitor::Monitor(unsigned int _idcnt, i_receiver (&HEATER), i_receiver (&SPRINKLER), i_receiver (&M_OUT), i_receiver (&T_OUT))
    : _specc::behavior(_idcnt), HEATER(HEATER), SPRINKLER(SPRINKLER), M_OUT(M_OUT), T_OUT(T_OUT),
    readHeater(_IDcnt, HEATER),
    readMoisture(_IDcnt, M_OUT),
    readSprinkler(_IDcnt, SPRINKLER),
    readTemp(_IDcnt, T_OUT)
{   /* nothing */
}

Monitor::~Monitor(void)
{   /* nothing */
}

void Monitor::main(void)

#line 120 "./Monitor.sc"
{   

#line 623 "GreenhouseArch2.cc"
    __PRF_globalCounter[18u]++ ;

#line 121 "./Monitor.sc"
    { _specc::fork _scc_fork_0(&readTemp), _scc_fork_1(&readMoisture), _scc_fork_2(&readHeater), _scc_fork_3(&readSprinkler); _specc::par(
	    &_scc_fork_0, 
	    &_scc_fork_1, 
	    &_scc_fork_2, 
	    &_scc_fork_3, ((_specc::fork*)0));
    }
}

#line 635 "GreenhouseArch2.cc"
sprinklercontrol::sprinklercontrol(unsigned int _idcnt, i_receiver (&moistdatain), i_sender (&sprinklercontrolout))
    : _specc::behavior(_idcnt), moistdatain(moistdatain), sprinklercontrolout(sprinklercontrolout)
{   /* nothing */
}

sprinklercontrol::~sprinklercontrol(void)
{   /* nothing */
}

void sprinklercontrol::main(void)

#line 15 "./SprinklerControl.sc"
{   
    int command; int h;

#line 651 "GreenhouseArch2.cc"
    __PRF_globalCounter[55u]++ ;
    _specc::waitfor(1866666ull);
    __PRF_globalCounter[56u]++ ;

#line 18 "./SprinklerControl.sc"
    while(1)
    {   

#line 660 "GreenhouseArch2.cc"
	__PRF_globalCounter[57u]++ ;
	__PRF_channelAccess(20256u, sizeof (h));

#line 20 "./SprinklerControl.sc"
	moistdatain.receive( &h, sizeof (h));

#line 667 "GreenhouseArch2.cc"
	__PRF_globalCounter[58u]++ ;

#line 21 "./SprinklerControl.sc"
	if (h == 0)

#line 673 "GreenhouseArch2.cc"
	{   
	    __PRF_globalCounter[59u]++ ;

#line 22 "./SprinklerControl.sc"
	    command = 1;
	}
	else 

#line 682 "GreenhouseArch2.cc"
	{   
	    __PRF_globalCounter[60u]++ ;

#line 24 "./SprinklerControl.sc"
	    command = 0;
	}

#line 690 "GreenhouseArch2.cc"
	__PRF_globalCounter[61u]++ ;

#line 25 "./SprinklerControl.sc"
	_specc::waitfor((10));

#line 696 "GreenhouseArch2.cc"
	__PRF_channelAccess(20129u, sizeof (command));

#line 26 "./SprinklerControl.sc"
	sprinklercontrolout.send( &command, sizeof (command));
    }
}

#line 704 "GreenhouseArch2.cc"
TempSense::TempSense(unsigned int _idcnt, i_sender (&TSENSE))
    : _specc::behavior(_idcnt), TSENSE(TSENSE)
{   /* nothing */
}

TempSense::~TempSense(void)
{   /* nothing */
}

void TempSense::main()

#line 21 "./Stimulus.sc"
{   
    struct _IO_FILE *f1;
    int t1 = 0;

#line 721 "GreenhouseArch2.cc"
    __PRF_globalCounter[32u]++ ;

#line 25 "./Stimulus.sc"
    f1 = fopen("tempin.txt", "r");

#line 727 "GreenhouseArch2.cc"
    __PRF_globalCounter[33u]++ ;

#line 27 "./Stimulus.sc"
    while( !feof(f1))
    {   

#line 734 "GreenhouseArch2.cc"
	__PRF_globalCounter[34u]++ ;

#line 29 "./Stimulus.sc"
	fscanf(f1, "%d",  &t1);

#line 740 "GreenhouseArch2.cc"
	__PRF_channelAccess(15128u, sizeof (t1));

#line 30 "./Stimulus.sc"
	TSENSE.send( &t1, sizeof (t1));
    }

#line 747 "GreenhouseArch2.cc"
    __PRF_globalCounter[35u]++ ;

#line 33 "./Stimulus.sc"
    fclose(f1);
}

#line 754 "GreenhouseArch2.cc"
MoistSense::MoistSense(unsigned int _idcnt, i_sender (&MSENSE))
    : _specc::behavior(_idcnt), MSENSE(MSENSE)
{   /* nothing */
}

MoistSense::~MoistSense(void)
{   /* nothing */
}

void MoistSense::main()

#line 40 "./Stimulus.sc"
{   
    struct _IO_FILE *f1;
    int t1 = 0;

#line 771 "GreenhouseArch2.cc"
    __PRF_globalCounter[14u]++ ;

#line 44 "./Stimulus.sc"
    f1 = fopen("moistin.txt", "r");

#line 777 "GreenhouseArch2.cc"
    __PRF_globalCounter[15u]++ ;

#line 46 "./Stimulus.sc"
    while( !feof(f1))
    {   

#line 784 "GreenhouseArch2.cc"
	__PRF_globalCounter[16u]++ ;

#line 48 "./Stimulus.sc"
	fscanf(f1, "%d",  &t1);

#line 790 "GreenhouseArch2.cc"
	__PRF_channelAccess(6128u, sizeof (t1));

#line 49 "./Stimulus.sc"
	MSENSE.send( &t1, sizeof (t1));
    }

#line 797 "GreenhouseArch2.cc"
    __PRF_globalCounter[17u]++ ;

#line 51 "./Stimulus.sc"
    fclose(f1);
}

#line 804 "GreenhouseArch2.cc"
UserEntry::UserEntry(unsigned int _idcnt, i_sender (&USERSET))
    : _specc::behavior(_idcnt), USERSET(USERSET)
{   /* nothing */
}

UserEntry::~UserEntry(void)
{   /* nothing */
}

void UserEntry::main()

#line 58 "./Stimulus.sc"
{   

    char tempdata[40];
    char moistdata[40];
    int convertedtempdata;
    int convertedmoistdata;

#line 824 "GreenhouseArch2.cc"
    __PRF_globalCounter[36u]++ ;

#line 65 "./Stimulus.sc"
    printf("\n--****--Climate Control--****--");
    printf("\n-------------------------------");

    printf("\n\nEnter Temperature Level (Temp): ");
    fgets(tempdata, sizeof (tempdata), stdin);
    sscanf(tempdata, "%d",  &convertedtempdata);

#line 835 "GreenhouseArch2.cc"
    __PRF_channelAccess(16128u, sizeof (convertedtempdata));

#line 71 "./Stimulus.sc"
    USERSET.send( &convertedtempdata, sizeof (convertedtempdata));

    printf("\n\nEnter Moisture Level (Moist): ");
    fgets(moistdata, sizeof (moistdata), stdin);
    sscanf(moistdata, "%d",  &convertedmoistdata);

#line 845 "GreenhouseArch2.cc"
    __PRF_channelAccess(16128u, sizeof (convertedmoistdata));

#line 76 "./Stimulus.sc"
    USERSET.send( &convertedmoistdata, sizeof (convertedmoistdata));
}

#line 852 "GreenhouseArch2.cc"
Stimulus::Stimulus(unsigned int _idcnt, i_sender (&USER_SET), i_sender (&M_SENSE), i_sender (&T_SENSE))
    : _specc::behavior(_idcnt), USER_SET(USER_SET), M_SENSE(M_SENSE), T_SENSE(T_SENSE),
    MSense(_IDcnt, M_SENSE),
    TTSense(_IDcnt, T_SENSE),
    User(_IDcnt, USER_SET)
{   /* nothing */
}

Stimulus::~Stimulus(void)
{   /* nothing */
}

void Stimulus::main(void)

#line 87 "./Stimulus.sc"
{   

#line 870 "GreenhouseArch2.cc"
    __PRF_globalCounter[31u]++ ;

#line 88 "./Stimulus.sc"
    { _specc::fork _scc_fork_0(&User), _scc_fork_1(&TTSense), _scc_fork_2(&MSense); _specc::par(
	    &_scc_fork_0, 
	    &_scc_fork_1, 
	    &_scc_fork_2, ((_specc::fork*)0));
    }
}

#line 881 "GreenhouseArch2.cc"
tempprocessing::tempprocessing(unsigned int _idcnt, i_receiver (&tempsettingsin), i_receiver (&tempdatain), i_sender (&tempdatacontrol), i_sender (&tempdataout))
    : _specc::behavior(_idcnt), tempsettingsin(tempsettingsin), tempdatain(tempdatain), tempdatacontrol(tempdatacontrol), tempdataout(tempdataout)
{   /* nothing */
}

tempprocessing::~tempprocessing(void)
{   /* nothing */
}

void tempprocessing::main(void)

#line 19 "./TempProcessing.sc"
{   
    int command; int h1; int tempset;

#line 897 "GreenhouseArch2.cc"
    __PRF_globalCounter[66u]++ ;
    _specc::waitfor(19533333ull);
    __PRF_channelAccess(22256u, sizeof (tempset));

#line 22 "./TempProcessing.sc"
    tempsettingsin.receive( &tempset, sizeof (tempset));

#line 905 "GreenhouseArch2.cc"
    __PRF_globalCounter[67u]++ ;

#line 24 "./TempProcessing.sc"
    while(1)
    {   

#line 912 "GreenhouseArch2.cc"
	__PRF_globalCounter[68u]++ ;
	__PRF_channelAccess(22257u, sizeof (h1));

#line 26 "./TempProcessing.sc"
	tempdatain.receive( &h1, sizeof (h1));

#line 919 "GreenhouseArch2.cc"
	__PRF_globalCounter[69u]++ ;

#line 28 "./TempProcessing.sc"
	if ((h1 - tempset) > ( -1.000000000000000e+00))

#line 925 "GreenhouseArch2.cc"
	{   
	    __PRF_globalCounter[70u]++ ;

#line 29 "./TempProcessing.sc"
	    command = 1;
	}
	else 

#line 934 "GreenhouseArch2.cc"
	{   
	    __PRF_globalCounter[71u]++ ;

#line 31 "./TempProcessing.sc"
	    command = 0;
	}

#line 942 "GreenhouseArch2.cc"
	__PRF_globalCounter[72u]++ ;
	__PRF_channelAccess(22130u, sizeof (command));

#line 33 "./TempProcessing.sc"
	tempdatacontrol.send( &command, sizeof (command));

#line 949 "GreenhouseArch2.cc"
	__PRF_channelAccess(22131u, sizeof (h1));

#line 34 "./TempProcessing.sc"
	tempdataout.send( &h1, sizeof (h1));
    }
}

#line 957 "GreenhouseArch2.cc"
Main::Main(unsigned int _idcnt)
    : _specc::class_type(_idcnt),
    _scc_const_port_0(10ul),
    _scc_const_port_1(10ul),
    _scc_const_port_2(10ul),
    _scc_const_port_3(10ul),
    _scc_const_port_4(10ul),
    _scc_const_port_5(10ul),
    _scc_const_port_6(10ul),
    CONT(_IDcnt, USER_SET, T_SENSE, M_SENSE, HEATER, SPRINKLER, T_OUT, M_OUT),
    HEATER(_scc_const_port_0),
    MTR(_IDcnt, HEATER, SPRINKLER, M_OUT, T_OUT),
    M_OUT(_scc_const_port_1),
    M_SENSE(_scc_const_port_2),
    SPRINKLER(_scc_const_port_3),
    STM(_IDcnt, USER_SET, M_SENSE, T_SENSE),
    T_OUT(_scc_const_port_4),
    T_SENSE(_scc_const_port_5),
    USER_SET(_scc_const_port_6)
{   /* nothing */
}

Main::~Main(void)
{   /* nothing */
}

int Main::main(void)

#line 35 "tb.sc"
{   

#line 989 "GreenhouseArch2.cc"
    __PRF_startProfiler("GreenhouseArch2_bb_counter.prf", "GreenhouseArch2_fn_counter.prf", 
	__PRF_globalCounter, 73u);
    __PRF_globalCounter[12u]++ ;

#line 36 "tb.sc"
    { _specc::fork _scc_fork_0(&STM), _scc_fork_1(&CONT), _scc_fork_2(&MTR); _specc::par(

#line 997 "GreenhouseArch2.cc"
	    &_scc_fork_0, &_scc_fork_1, &_scc_fork_2, ((_specc::fork*)0));
    }
    __PRF_globalCounter[13u]++ ;
    return (0);
}

Main _scc_main(_IDcnt);

int main(void)
{   
    int _scc_main_return;
    
    _specc::start();
    _scc_main_return = _scc_main.main();
    _specc::end();
    return(_scc_main_return);
}

Climate_Control::Climate_Control(unsigned int _idcnt, i_receiver (&settingsin), i_receiver (&tempin), i_receiver (&moisturein), i_sender (&heatcontrolout), i_sender (&sprinklercontrolout), i_sender (&tempout), i_sender (&moistureout))
    : _specc::behavior(_idcnt), settingsin(settingsin), tempin(tempin), moisturein(moisturein), heatcontrolout(heatcontrolout), sprinklercontrolout(sprinklercontrolout), tempout(tempout), moistureout(moistureout),
    _scc_const_port_0(10ul),
    _scc_const_port_1(10ul),
    DSP(_IDcnt, tempin, moisturein, heatcontrolout, sprinklercontrolout, tempout, moistureout, Moisturesetin, Tempsetin),
    HW_Standard1(_IDcnt, settingsin, Moisturesetin, Tempsetin),
    Moisturesetin(_scc_const_port_0),
    Tempsetin(_scc_const_port_1)
{   /* nothing */
}

Climate_Control::~Climate_Control(void)
{   /* nothing */
}

void Climate_Control::main(void)
{   
    __PRF_globalCounter[0u]++ ;
    { _specc::fork _scc_fork_0(&DSP), _scc_fork_1(&HW_Standard1); _specc::par(&_scc_fork_0, &_scc_fork_1, ((_specc::fork*)0));
    }
}

HW_Standard_HW_Standard1::HW_Standard_HW_Standard1(unsigned int _idcnt, i_receiver (&settingsin), i_sender (&Moisturesetin), i_sender (&Tempsetin))
    : _specc::behavior(_idcnt), settingsin(settingsin), Moisturesetin(Moisturesetin), Tempsetin(Tempsetin),
    _app(_IDcnt, settingsin, Moisturesetin, Tempsetin)
{   /* nothing */
}

HW_Standard_HW_Standard1::~HW_Standard_HW_Standard1(void)
{   /* nothing */
}

void HW_Standard_HW_Standard1::main(void)
{   
    __PRF_globalCounter[1u]++ ;
    while(1)
    {   
	__PRF_globalCounter[2u]++ ;
	_app.main();
    }
}

HW_Standard_HW_Standard1_App::HW_Standard_HW_Standard1_App(unsigned int _idcnt, i_receiver (&settingsin), i_sender (&Moisturesetin), i_sender (&Tempsetin))
    : _specc::behavior(_idcnt), settingsin(settingsin), Moisturesetin(Moisturesetin), Tempsetin(Tempsetin),
    RS(_IDcnt, settingsin, Tempsetin, Moisturesetin)
{   /* nothing */
}

HW_Standard_HW_Standard1_App::~HW_Standard_HW_Standard1_App(void)
{   /* nothing */
}

void HW_Standard_HW_Standard1_App::main(void)
{   
    __PRF_globalCounter[3u]++ ;
    RS.main();
}

Motorola_DSP56600_0_DSP::Motorola_DSP56600_0_DSP(unsigned int _idcnt, i_receiver (&tempin), i_receiver (&moisturein), i_sender (&heatcontrolout), i_sender (&sprinklercontrolout), i_sender (&tempout), i_sender (&moistureout), i_receiver (&Moisturesetin), i_receiver (&Tempsetin))
    : _specc::behavior(_idcnt), tempin(tempin), moisturein(moisturein), heatcontrolout(heatcontrolout), sprinklercontrolout(sprinklercontrolout), tempout(tempout), moistureout(moistureout), Moisturesetin(Moisturesetin), Tempsetin(Tempsetin),
    PM(_IDcnt, Moisturesetin, moisturein, sprinklercontrolout, moistureout),
    PT(_IDcnt, Tempsetin, tempin, heatcontrolout, tempout)
{   /* nothing */
}

Motorola_DSP56600_0_DSP::~Motorola_DSP56600_0_DSP(void)
{   /* nothing */
}

void Motorola_DSP56600_0_DSP::main(void)
{   
    __PRF_globalCounter[19u]++ ;
    { _specc::fork _scc_fork_0(&PT), _scc_fork_1(&PM); _specc::par(&_scc_fork_0, &_scc_fork_1, ((_specc::fork*)0));
    }
}

Process_Moisture::Process_Moisture(unsigned int _idcnt, i_receiver (&moistsettingsin), i_receiver (&moistdatain), i_sender (&sprinklercontrolout), i_sender (&moistdataout))
    : _specc::behavior(_idcnt), moistsettingsin(moistsettingsin), moistdatain(moistdatain), sprinklercontrolout(sprinklercontrolout), moistdataout(moistdataout),
    SIZE(10ul),
    _scc_const_port_0(10ul),
    CC1(_scc_const_port_0),
    MP(_IDcnt, moistsettingsin, moistdatain, CC1, moistdataout),
    SC(_IDcnt, CC1, sprinklercontrolout)
{   /* nothing */
}

Process_Moisture::~Process_Moisture(void)
{   /* nothing */
}

void Process_Moisture::main(void)
{   
    __PRF_globalCounter[20u]++ ;
    { _specc::fork _scc_fork_0(&MP), _scc_fork_1(&SC); _specc::par(&_scc_fork_0, &_scc_fork_1, ((_specc::fork*)0));
    }
}

Process_Temperature::Process_Temperature(unsigned int _idcnt, i_receiver (&tempsettingsin), i_receiver (&tempdatain), i_sender (&heatcontrolout), i_sender (&tempdataout))
    : _specc::behavior(_idcnt), tempsettingsin(tempsettingsin), tempdatain(tempdatain), heatcontrolout(heatcontrolout), tempdataout(tempdataout),
    SIZE(10ul),
    _scc_const_port_0(10ul),
    C(_IDcnt, C1, heatcontrolout),
    C1(_scc_const_port_0),
    P(_IDcnt, tempsettingsin, tempdatain, C1, tempdataout)
{   /* nothing */
}

Process_Temperature::~Process_Temperature(void)
{   /* nothing */
}

void Process_Temperature::main(void)
{   
    __PRF_globalCounter[21u]++ ;
    { _specc::fork _scc_fork_0(&P), _scc_fork_1(&C); _specc::par(&_scc_fork_0, &_scc_fork_1, ((_specc::fork*)0));
    }
}

Read_Settings::Read_Settings(unsigned int _idcnt, i_receiver (&settingsin), i_sender (&tempsetout), i_sender (&moisturesetout))
    : _specc::behavior(_idcnt), settingsin(settingsin), tempsetout(tempsetout), moisturesetout(moisturesetout)
{   /* nothing */
}

Read_Settings::~Read_Settings(void)
{   /* nothing */
}

void Read_Settings::main(void)
{   
    __PRF_globalCounter[22u]++ ;
    _specc::waitfor(0ull);
    __PRF_channelAccess(12256u, sizeof (tSetting));
    settingsin.receive( &tSetting, sizeof (tSetting));
    printf("Temp Setting: %i\n", tSetting);
    __PRF_channelAccess(12256u, sizeof (mSetting));
    settingsin.receive( &mSetting, sizeof (mSetting));
    __PRF_channelAccess(12129u, sizeof (tSetting));
    tempsetout.send( &tSetting, sizeof (tSetting));
    __PRF_channelAccess(12130u, sizeof (mSetting));
    moisturesetout.send( &mSetting, sizeof (mSetting));
}

void _scc_bit4_err_handle(
    const _bit4& bit4vec)
{   
    char temp_bits[1024], *p;
    p=bit2str(2,&temp_bits[1023], bit4vec);
    _specc::abort(
	"ERROR:\t Casting a bit4 vector failed \n"
	"Bit4 vector contains X/Z values %s\n"
	"Simulation aborted.\n", p);
	
}

//////////////////////////////////////////////////////////////////////
// End of file GreenhouseArch2.cc
//////////////////////////////////////////////////////////////////////
