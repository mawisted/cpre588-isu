//////////////////////////////////////////////////////////////////////
// C++ source file generated by SpecC V2.2.1
// Design: GreenhouseSpec
// File:   GreenhouseSpec.cc
// Time:   Sun May  9 17:02:18 2010
//////////////////////////////////////////////////////////////////////

// Note: User-defined include files are inlined in this file.

// Note: System-defined include files are inlined in this file.

#include "GreenhouseSpec.h"


unsigned int _IDcnt = 0;
// variable definitions //////////////////////////////////////////////

#line 16 "tb.sc"
const unsigned long int SIZE = 10ul;
const unsigned long int MSize = 10ul;

#line 23 "GreenhouseSpec.cc"
unsigned int __PRF_globalCounter[67];

// channel class definitions /////////////////////////////////////////

c_queue::c_queue(const unsigned long int (&size))
    : _specc::channel(), size(size),
    buffer(0),
    n(0ul),
    p(0ul),
    wr(0ul),
    ws(0ul)
{   /* nothing */
}

c_queue::~c_queue(void)
{   /* nothing */
}

#line 99 "c_queue.sc"
void c_queue::cleanup(void)
{   
    if ( !n)
    {   
	free(buffer);
	buffer = 0;
    }
}

void c_queue::receive(void *d, unsigned long int l)
{   
    unsigned long int p0;

    while(l > n)
    {   
	wr++ ;
	_specc::wait(event(&r), ((void*)0));
	wr-- ;
    }

    if (n <= p)
    {   
	p0 = p - n;
    }
    else 
    {   
	p0 = p + size - n;
    }
    if (l <= size - p0)
    {   
	memcpy(d,  &buffer[p0], l);
	n -= l;
    }
    else 
    {   
	memcpy(d,  &buffer[p0], size - p0);
	memcpy(((char *)d) + (size - p0),  &buffer[0], l - (size - p0));
	n -= l;
    }

    if (ws)
    {   
	_specc::notify(event(&s), ((void*)0));
    }

    cleanup();
}

void c_queue::send(const void *d, unsigned long int l)
{   
    while(l > size - n)
    {   
	ws++ ;
	_specc::wait(event(&s), ((void*)0));
	ws-- ;
    }

    setup();

    if (l <= size - p)
    {   
	memcpy( &buffer[p], d, l);
	p += l;
	n += l;
    }
    else 
    {   
	memcpy( &buffer[p], d, size - p);
	memcpy( &buffer[0], ((char *)d) + (size - p), l - (size - p));
	p = l - (size - p);
	n += l;
    }

    if (wr)
    {   
	_specc::notify(event(&r), ((void*)0));
    }
}

#line 87 "c_queue.sc"
void c_queue::setup(void)
{   
    if ( !buffer)
    {   
	if ( !(buffer = (char *)malloc(size)))
	{   
	    perror("c_queue");
	    abort();
	}
    }
}

// behavior class definitions ////////////////////////////////////////

#line 137 "GreenhouseSpec.cc"
Climate_Control::Climate_Control(unsigned int _idcnt, i_receiver (&settingsin), i_receiver (&tempin), i_receiver (&moisturein), i_sender (&heatcontrolout), i_sender (&sprinklercontrolout), i_sender (&tempout), i_sender (&moistureout))
    : _specc::behavior(_idcnt), settingsin(settingsin), tempin(tempin), moisturein(moisturein), heatcontrolout(heatcontrolout), sprinklercontrolout(sprinklercontrolout), tempout(tempout), moistureout(moistureout),
    SIZE(10ul),
    _scc_const_port_0(10ul),
    _scc_const_port_1(10ul),
    _scc_const_port_2(10ul),
    Moistclockdata(_scc_const_port_0),
    Moisturesetin(_scc_const_port_1),
    PM(_IDcnt, Moisturesetin, moisturein, sprinklercontrolout, moistureout),
    PT(_IDcnt, Tempsetin, tempin, heatcontrolout, tempout),
    RS(_IDcnt, settingsin, Tempsetin, Moisturesetin),
    Tempsetin(_scc_const_port_2)
{   /* nothing */
}

Climate_Control::~Climate_Control(void)
{   /* nothing */
}

void Climate_Control::main(void)

#line 30 "./Climate_Control.sc"
{   

#line 162 "GreenhouseSpec.cc"
    __PRF_globalCounter[0u]++ ;

#line 31 "./Climate_Control.sc"
    { _specc::fork _scc_fork_0(&RS), _scc_fork_1(&PT), _scc_fork_2(&PM); _specc::par(
	    &_scc_fork_0, 
	    &_scc_fork_1, 
	    &_scc_fork_2, ((_specc::fork*)0));
    }
}

#line 173 "GreenhouseSpec.cc"
heatcontrol::heatcontrol(unsigned int _idcnt, i_receiver (&tempdatain), i_sender (&heatcontrolout))
    : _specc::behavior(_idcnt), tempdatain(tempdatain), heatcontrolout(heatcontrolout)
{   /* nothing */
}

heatcontrol::~heatcontrol(void)
{   /* nothing */
}

void heatcontrol::main(void)

#line 21 "./HeatControl.sc"
{   
    int command; int h;

#line 189 "GreenhouseSpec.cc"
    __PRF_globalCounter[33u]++ ;

#line 24 "./HeatControl.sc"
    while(1)
    {   

#line 196 "GreenhouseSpec.cc"
	__PRF_globalCounter[34u]++ ;
	__PRF_channelAccess(12256u, sizeof (h));

#line 26 "./HeatControl.sc"
	tempdatain.receive( &h, sizeof (h));

#line 203 "GreenhouseSpec.cc"
	__PRF_globalCounter[35u]++ ;

#line 27 "./HeatControl.sc"
	if (h == 0)

#line 209 "GreenhouseSpec.cc"
	{   
	    __PRF_globalCounter[36u]++ ;

#line 28 "./HeatControl.sc"
	    command = 1;
	}
	else 

#line 218 "GreenhouseSpec.cc"
	{   
	    __PRF_globalCounter[37u]++ ;

#line 30 "./HeatControl.sc"
	    command = 0;
	}

#line 226 "GreenhouseSpec.cc"
	__PRF_globalCounter[38u]++ ;

#line 31 "./HeatControl.sc"
	_specc::waitfor((10));

#line 232 "GreenhouseSpec.cc"
	__PRF_channelAccess(12129u, sizeof (command));

#line 32 "./HeatControl.sc"
	heatcontrolout.send( &command, sizeof (command));
    }
}

#line 240 "GreenhouseSpec.cc"
moistprocessing::moistprocessing(unsigned int _idcnt, i_receiver (&moistsettingsin), i_receiver (&moistdatain), i_sender (&moistdatacontrol), i_sender (&moistdataout))
    : _specc::behavior(_idcnt), moistsettingsin(moistsettingsin), moistdatain(moistdatain), moistdatacontrol(moistdatacontrol), moistdataout(moistdataout)
{   /* nothing */
}

moistprocessing::~moistprocessing(void)
{   /* nothing */
}

void moistprocessing::main(void)

#line 18 "./MoistProcessing.sc"
{   
    int command; int h1; int moistset;

#line 256 "GreenhouseSpec.cc"
    __PRF_globalCounter[39u]++ ;
    __PRF_channelAccess(13256u, sizeof (moistset));

#line 21 "./MoistProcessing.sc"
    moistsettingsin.receive( &moistset, sizeof (moistset));

#line 263 "GreenhouseSpec.cc"
    __PRF_globalCounter[40u]++ ;

#line 22 "./MoistProcessing.sc"
    while(1) {

#line 269 "GreenhouseSpec.cc"
	__PRF_globalCounter[41u]++ ;
	__PRF_channelAccess(13257u, sizeof (h1));

#line 23 "./MoistProcessing.sc"
	moistdatain.receive( &h1, sizeof (h1));

#line 276 "GreenhouseSpec.cc"
	__PRF_globalCounter[42u]++ ;

#line 25 "./MoistProcessing.sc"
	if ((h1 - moistset) > ( -1.000000000000000e+00))

#line 282 "GreenhouseSpec.cc"
	{   
	    __PRF_globalCounter[43u]++ ;

#line 26 "./MoistProcessing.sc"
	    command = 1;
	}
	else 

#line 291 "GreenhouseSpec.cc"
	{   
	    __PRF_globalCounter[44u]++ ;

#line 28 "./MoistProcessing.sc"
	    command = 0;
	}

#line 299 "GreenhouseSpec.cc"
	__PRF_globalCounter[45u]++ ;
	__PRF_channelAccess(13130u, sizeof (command));

#line 30 "./MoistProcessing.sc"
	moistdatacontrol.send( &command, sizeof (command));

#line 306 "GreenhouseSpec.cc"
	__PRF_channelAccess(13131u, sizeof (h1));

#line 31 "./MoistProcessing.sc"
	moistdataout.send( &h1, sizeof (h1));
    }
}

#line 314 "GreenhouseSpec.cc"
temp_receiver::temp_receiver(unsigned int _idcnt, i_receiver (&temp))
    : _specc::behavior(_idcnt), temp(temp)
{   /* nothing */
}

temp_receiver::~temp_receiver(void)
{   /* nothing */
}

void temp_receiver::main()

#line 21 "./Monitor.sc"
{   

    struct _IO_FILE *f1;
    int count; int data;

#line 332 "GreenhouseSpec.cc"
    __PRF_globalCounter[56u]++ ;

#line 26 "./Monitor.sc"
    count = 0;
    f1 = fopen("tempout.txt", "w");

#line 339 "GreenhouseSpec.cc"
    __PRF_globalCounter[57u]++ ;

#line 29 "./Monitor.sc"
    while(count <= 29) {

#line 345 "GreenhouseSpec.cc"
	__PRF_globalCounter[58u]++ ;
	__PRF_channelAccess(16256u, sizeof (data));

#line 30 "./Monitor.sc"
	temp.receive( &data, sizeof (data));
	fprintf(f1, "%i\n", data);
	count++ ;
    }

#line 355 "GreenhouseSpec.cc"
    __PRF_globalCounter[59u]++ ;

#line 34 "./Monitor.sc"
    fclose(f1);
    exit(0);
}

#line 363 "GreenhouseSpec.cc"
moisture_receiver::moisture_receiver(unsigned int _idcnt, i_receiver (&moisture))
    : _specc::behavior(_idcnt), moisture(moisture)
{   /* nothing */
}

moisture_receiver::~moisture_receiver(void)
{   /* nothing */
}

void moisture_receiver::main()

#line 41 "./Monitor.sc"
{   
    struct _IO_FILE *f1;
    int count; int data;

#line 380 "GreenhouseSpec.cc"
    __PRF_globalCounter[46u]++ ;

#line 45 "./Monitor.sc"
    count = 0;
    f1 = fopen("moistout.txt", "w");

#line 387 "GreenhouseSpec.cc"
    __PRF_globalCounter[47u]++ ;

#line 48 "./Monitor.sc"
    while(count <= 29) {

#line 393 "GreenhouseSpec.cc"
	__PRF_globalCounter[48u]++ ;
	__PRF_channelAccess(14256u, sizeof (data));

#line 49 "./Monitor.sc"
	moisture.receive( &data, sizeof (data));
	fprintf(f1, "%i\n", data);
	count++ ;
    }

#line 403 "GreenhouseSpec.cc"
    __PRF_globalCounter[49u]++ ;

#line 53 "./Monitor.sc"
    fclose(f1);
    exit(0);
}

#line 411 "GreenhouseSpec.cc"
Heater_Flag::Heater_Flag(unsigned int _idcnt, i_receiver (&Heater))
    : _specc::behavior(_idcnt), Heater(Heater)
{   /* nothing */
}

Heater_Flag::~Heater_Flag(void)
{   /* nothing */
}

void Heater_Flag::main()

#line 61 "./Monitor.sc"
{   
    struct _IO_FILE *f1;
    int count; int data;

#line 428 "GreenhouseSpec.cc"
    __PRF_globalCounter[1u]++ ;

#line 65 "./Monitor.sc"
    count = 0;
    f1 = fopen("heaterout.txt", "w");

#line 435 "GreenhouseSpec.cc"
    __PRF_globalCounter[2u]++ ;

#line 68 "./Monitor.sc"
    while(count <= 29) {

#line 441 "GreenhouseSpec.cc"
	__PRF_globalCounter[3u]++ ;
	__PRF_channelAccess(1256u, sizeof (data));

#line 69 "./Monitor.sc"
	Heater.receive( &data, sizeof (data));

#line 448 "GreenhouseSpec.cc"
	__PRF_globalCounter[4u]++ ;

#line 70 "./Monitor.sc"
	if (data == 1)

#line 454 "GreenhouseSpec.cc"
	{   
	    __PRF_globalCounter[5u]++ ;

#line 71 "./Monitor.sc"
	    fprintf(f1, "Heater On\n");
	}
	else 

#line 463 "GreenhouseSpec.cc"
	{   
	    __PRF_globalCounter[6u]++ ;

#line 73 "./Monitor.sc"
	    fprintf(f1, "Heater Off\n");
	}

#line 471 "GreenhouseSpec.cc"
	__PRF_globalCounter[7u]++ ;

#line 74 "./Monitor.sc"
	count++ ;
    }

#line 478 "GreenhouseSpec.cc"
    __PRF_globalCounter[8u]++ ;

#line 76 "./Monitor.sc"
    fclose(f1);
    exit(0);
}

#line 486 "GreenhouseSpec.cc"
Sprinkler_Flag::Sprinkler_Flag(unsigned int _idcnt, i_receiver (&Sprinkler))
    : _specc::behavior(_idcnt), Sprinkler(Sprinkler)
{   /* nothing */
}

Sprinkler_Flag::~Sprinkler_Flag(void)
{   /* nothing */
}

void Sprinkler_Flag::main()

#line 84 "./Monitor.sc"
{   
    struct _IO_FILE *f1;
    int count; int data;

#line 503 "GreenhouseSpec.cc"
    __PRF_globalCounter[19u]++ ;

#line 88 "./Monitor.sc"
    count = 0;
    f1 = fopen("sprinklerout.txt", "w");

#line 510 "GreenhouseSpec.cc"
    __PRF_globalCounter[20u]++ ;

#line 91 "./Monitor.sc"
    while(count <= 29) {

#line 516 "GreenhouseSpec.cc"
	__PRF_globalCounter[21u]++ ;
	__PRF_channelAccess(8256u, sizeof (data));

#line 92 "./Monitor.sc"
	Sprinkler.receive( &data, sizeof (data));

#line 523 "GreenhouseSpec.cc"
	__PRF_globalCounter[22u]++ ;

#line 93 "./Monitor.sc"
	if (data == 1)

#line 529 "GreenhouseSpec.cc"
	{   
	    __PRF_globalCounter[23u]++ ;

#line 94 "./Monitor.sc"
	    fprintf(f1, "Sprinker On\n");
	}
	else 

#line 538 "GreenhouseSpec.cc"
	{   
	    __PRF_globalCounter[24u]++ ;

#line 96 "./Monitor.sc"
	    fprintf(f1, "Sprinkler Off\n");
	}

#line 546 "GreenhouseSpec.cc"
	__PRF_globalCounter[25u]++ ;

#line 97 "./Monitor.sc"
	count++ ;
    }

#line 553 "GreenhouseSpec.cc"
    __PRF_globalCounter[26u]++ ;

#line 99 "./Monitor.sc"
    fclose(f1);
    exit(0);
}

#line 561 "GreenhouseSpec.cc"
Monitor::Monitor(unsigned int _idcnt, i_receiver (&HEATER), i_receiver (&SPRINKLER), i_receiver (&M_OUT), i_receiver (&T_OUT))
    : _specc::behavior(_idcnt), HEATER(HEATER), SPRINKLER(SPRINKLER), M_OUT(M_OUT), T_OUT(T_OUT),
    readHeater(_IDcnt, HEATER),
    readMoisture(_IDcnt, M_OUT),
    readSprinkler(_IDcnt, SPRINKLER),
    readTemp(_IDcnt, T_OUT)
{   /* nothing */
}

Monitor::~Monitor(void)
{   /* nothing */
}

void Monitor::main(void)

#line 120 "./Monitor.sc"
{   

#line 580 "GreenhouseSpec.cc"
    __PRF_globalCounter[15u]++ ;

#line 121 "./Monitor.sc"
    { _specc::fork _scc_fork_0(&readTemp), _scc_fork_1(&readMoisture), _scc_fork_2(&readHeater), _scc_fork_3(&readSprinkler); _specc::par(
	    &_scc_fork_0, 
	    &_scc_fork_1, 
	    &_scc_fork_2, 
	    &_scc_fork_3, ((_specc::fork*)0));
    }
}

#line 592 "GreenhouseSpec.cc"
Process_Moisture::Process_Moisture(unsigned int _idcnt, i_receiver (&moistsettingsin), i_receiver (&moistdatain), i_sender (&sprinklercontrolout), i_sender (&moistdataout))
    : _specc::behavior(_idcnt), moistsettingsin(moistsettingsin), moistdatain(moistdatain), sprinklercontrolout(sprinklercontrolout), moistdataout(moistdataout),
    SIZE(10ul),
    _scc_const_port_0(10ul),
    CC1(_scc_const_port_0),
    MP(_IDcnt, moistsettingsin, moistdatain, CC1, moistdataout),
    SC(_IDcnt, CC1, sprinklercontrolout)
{   /* nothing */
}

Process_Moisture::~Process_Moisture(void)
{   /* nothing */
}

void Process_Moisture::main(void)

#line 31 "./Process_Moisture.sc"
{   

#line 612 "GreenhouseSpec.cc"
    __PRF_globalCounter[16u]++ ;

#line 32 "./Process_Moisture.sc"
    { _specc::fork _scc_fork_0(&MP), _scc_fork_1(&SC); _specc::par(
	    &_scc_fork_0, 
	    &_scc_fork_1, ((_specc::fork*)0));
    }
}

#line 622 "GreenhouseSpec.cc"
Process_Temperature::Process_Temperature(unsigned int _idcnt, i_receiver (&tempsettingsin), i_receiver (&tempdatain), i_sender (&heatcontrolout), i_sender (&tempdataout))
    : _specc::behavior(_idcnt), tempsettingsin(tempsettingsin), tempdatain(tempdatain), heatcontrolout(heatcontrolout), tempdataout(tempdataout),
    SIZE(10ul),
    _scc_const_port_0(10ul),
    C(_IDcnt, C1, heatcontrolout),
    C1(_scc_const_port_0),
    P(_IDcnt, tempsettingsin, tempdatain, C1, tempdataout)
{   /* nothing */
}

Process_Temperature::~Process_Temperature(void)
{   /* nothing */
}

void Process_Temperature::main(void)

#line 26 "./Process_Temperature.sc"
{   

#line 642 "GreenhouseSpec.cc"
    __PRF_globalCounter[17u]++ ;

#line 27 "./Process_Temperature.sc"
    { _specc::fork _scc_fork_0(&P), _scc_fork_1(&C); _specc::par(
	    &_scc_fork_0, 
	    &_scc_fork_1, ((_specc::fork*)0));
    }
}

#line 652 "GreenhouseSpec.cc"
Read_Settings::Read_Settings(unsigned int _idcnt, i_receiver (&settingsin), i_sender (&tempsetout), i_sender (&moisturesetout))
    : _specc::behavior(_idcnt), settingsin(settingsin), tempsetout(tempsetout), moisturesetout(moisturesetout)
{   /* nothing */
}

Read_Settings::~Read_Settings(void)
{   /* nothing */
}

void Read_Settings::main(void)

#line 20 "./Read_Settings.sc"
{   

#line 667 "GreenhouseSpec.cc"
    __PRF_globalCounter[18u]++ ;
    __PRF_channelAccess(7256u, sizeof (tSetting));

#line 21 "./Read_Settings.sc"
    settingsin.receive( &tSetting, sizeof (tSetting));
    printf("Temp Setting: %i\n", tSetting);

#line 675 "GreenhouseSpec.cc"
    __PRF_channelAccess(7256u, sizeof (mSetting));

#line 23 "./Read_Settings.sc"
    settingsin.receive( &mSetting, sizeof (mSetting));

#line 681 "GreenhouseSpec.cc"
    __PRF_channelAccess(7129u, sizeof (tSetting));

#line 25 "./Read_Settings.sc"
    tempsetout.send( &tSetting, sizeof (tSetting));

#line 687 "GreenhouseSpec.cc"
    __PRF_channelAccess(7130u, sizeof (mSetting));

#line 26 "./Read_Settings.sc"
    moisturesetout.send( &mSetting, sizeof (mSetting));
}

#line 694 "GreenhouseSpec.cc"
sprinklercontrol::sprinklercontrol(unsigned int _idcnt, i_receiver (&moistdatain), i_sender (&sprinklercontrolout))
    : _specc::behavior(_idcnt), moistdatain(moistdatain), sprinklercontrolout(sprinklercontrolout)
{   /* nothing */
}

sprinklercontrol::~sprinklercontrol(void)
{   /* nothing */
}

void sprinklercontrol::main(void)

#line 15 "./SprinklerControl.sc"
{   
    int command; int h;

#line 710 "GreenhouseSpec.cc"
    __PRF_globalCounter[50u]++ ;

#line 18 "./SprinklerControl.sc"
    while(1)
    {   

#line 717 "GreenhouseSpec.cc"
	__PRF_globalCounter[51u]++ ;
	__PRF_channelAccess(15256u, sizeof (h));

#line 20 "./SprinklerControl.sc"
	moistdatain.receive( &h, sizeof (h));

#line 724 "GreenhouseSpec.cc"
	__PRF_globalCounter[52u]++ ;

#line 21 "./SprinklerControl.sc"
	if (h == 0)

#line 730 "GreenhouseSpec.cc"
	{   
	    __PRF_globalCounter[53u]++ ;

#line 22 "./SprinklerControl.sc"
	    command = 1;
	}
	else 

#line 739 "GreenhouseSpec.cc"
	{   
	    __PRF_globalCounter[54u]++ ;

#line 24 "./SprinklerControl.sc"
	    command = 0;
	}

#line 747 "GreenhouseSpec.cc"
	__PRF_globalCounter[55u]++ ;

#line 25 "./SprinklerControl.sc"
	_specc::waitfor((10));

#line 753 "GreenhouseSpec.cc"
	__PRF_channelAccess(15129u, sizeof (command));

#line 26 "./SprinklerControl.sc"
	sprinklercontrolout.send( &command, sizeof (command));
    }
}

#line 761 "GreenhouseSpec.cc"
TempSense::TempSense(unsigned int _idcnt, i_sender (&TSENSE))
    : _specc::behavior(_idcnt), TSENSE(TSENSE)
{   /* nothing */
}

TempSense::~TempSense(void)
{   /* nothing */
}

void TempSense::main()

#line 21 "./Stimulus.sc"
{   
    struct _IO_FILE *f1;
    int t1 = 0;

#line 778 "GreenhouseSpec.cc"
    __PRF_globalCounter[28u]++ ;

#line 25 "./Stimulus.sc"
    f1 = fopen("tempin.txt", "r");

#line 784 "GreenhouseSpec.cc"
    __PRF_globalCounter[29u]++ ;

#line 27 "./Stimulus.sc"
    while( !feof(f1))
    {   

#line 791 "GreenhouseSpec.cc"
	__PRF_globalCounter[30u]++ ;

#line 29 "./Stimulus.sc"
	fscanf(f1, "%d",  &t1);

#line 797 "GreenhouseSpec.cc"
	__PRF_channelAccess(10128u, sizeof (t1));

#line 30 "./Stimulus.sc"
	TSENSE.send( &t1, sizeof (t1));
    }

#line 804 "GreenhouseSpec.cc"
    __PRF_globalCounter[31u]++ ;

#line 33 "./Stimulus.sc"
    fclose(f1);
}

#line 811 "GreenhouseSpec.cc"
MoistSense::MoistSense(unsigned int _idcnt, i_sender (&MSENSE))
    : _specc::behavior(_idcnt), MSENSE(MSENSE)
{   /* nothing */
}

MoistSense::~MoistSense(void)
{   /* nothing */
}

void MoistSense::main()

#line 40 "./Stimulus.sc"
{   
    struct _IO_FILE *f1;
    int t1 = 0;

#line 828 "GreenhouseSpec.cc"
    __PRF_globalCounter[11u]++ ;

#line 44 "./Stimulus.sc"
    f1 = fopen("moistin.txt", "r");

#line 834 "GreenhouseSpec.cc"
    __PRF_globalCounter[12u]++ ;

#line 46 "./Stimulus.sc"
    while( !feof(f1))
    {   

#line 841 "GreenhouseSpec.cc"
	__PRF_globalCounter[13u]++ ;

#line 48 "./Stimulus.sc"
	fscanf(f1, "%d",  &t1);

#line 847 "GreenhouseSpec.cc"
	__PRF_channelAccess(3128u, sizeof (t1));

#line 49 "./Stimulus.sc"
	MSENSE.send( &t1, sizeof (t1));
    }

#line 854 "GreenhouseSpec.cc"
    __PRF_globalCounter[14u]++ ;

#line 51 "./Stimulus.sc"
    fclose(f1);
}

#line 861 "GreenhouseSpec.cc"
UserEntry::UserEntry(unsigned int _idcnt, i_sender (&USERSET))
    : _specc::behavior(_idcnt), USERSET(USERSET)
{   /* nothing */
}

UserEntry::~UserEntry(void)
{   /* nothing */
}

void UserEntry::main()

#line 58 "./Stimulus.sc"
{   

    char tempdata[40];
    char moistdata[40];
    int convertedtempdata;
    int convertedmoistdata;

#line 881 "GreenhouseSpec.cc"
    __PRF_globalCounter[32u]++ ;

#line 65 "./Stimulus.sc"
    printf("\n--****--Climate Control--****--");
    printf("\n-------------------------------");

    printf("\n\nEnter Temperature Level (Temp): ");
    fgets(tempdata, sizeof (tempdata), stdin);
    sscanf(tempdata, "%d",  &convertedtempdata);

#line 892 "GreenhouseSpec.cc"
    __PRF_channelAccess(11128u, sizeof (convertedtempdata));

#line 71 "./Stimulus.sc"
    USERSET.send( &convertedtempdata, sizeof (convertedtempdata));

    printf("\n\nEnter Moisture Level (Moist): ");
    fgets(moistdata, sizeof (moistdata), stdin);
    sscanf(moistdata, "%d",  &convertedmoistdata);

#line 902 "GreenhouseSpec.cc"
    __PRF_channelAccess(11128u, sizeof (convertedmoistdata));

#line 76 "./Stimulus.sc"
    USERSET.send( &convertedmoistdata, sizeof (convertedmoistdata));
}

#line 909 "GreenhouseSpec.cc"
Stimulus::Stimulus(unsigned int _idcnt, i_sender (&USER_SET), i_sender (&M_SENSE), i_sender (&T_SENSE))
    : _specc::behavior(_idcnt), USER_SET(USER_SET), M_SENSE(M_SENSE), T_SENSE(T_SENSE),
    MSense(_IDcnt, M_SENSE),
    TTSense(_IDcnt, T_SENSE),
    User(_IDcnt, USER_SET)
{   /* nothing */
}

Stimulus::~Stimulus(void)
{   /* nothing */
}

void Stimulus::main(void)

#line 87 "./Stimulus.sc"
{   

#line 927 "GreenhouseSpec.cc"
    __PRF_globalCounter[27u]++ ;

#line 88 "./Stimulus.sc"
    { _specc::fork _scc_fork_0(&User), _scc_fork_1(&TTSense), _scc_fork_2(&MSense); _specc::par(
	    &_scc_fork_0, 
	    &_scc_fork_1, 
	    &_scc_fork_2, ((_specc::fork*)0));
    }
}

#line 938 "GreenhouseSpec.cc"
tempprocessing::tempprocessing(unsigned int _idcnt, i_receiver (&tempsettingsin), i_receiver (&tempdatain), i_sender (&tempdatacontrol), i_sender (&tempdataout))
    : _specc::behavior(_idcnt), tempsettingsin(tempsettingsin), tempdatain(tempdatain), tempdatacontrol(tempdatacontrol), tempdataout(tempdataout)
{   /* nothing */
}

tempprocessing::~tempprocessing(void)
{   /* nothing */
}

void tempprocessing::main(void)

#line 19 "./TempProcessing.sc"
{   
    int command; int h1; int tempset;

#line 954 "GreenhouseSpec.cc"
    __PRF_globalCounter[60u]++ ;
    __PRF_channelAccess(17256u, sizeof (tempset));

#line 22 "./TempProcessing.sc"
    tempsettingsin.receive( &tempset, sizeof (tempset));

#line 961 "GreenhouseSpec.cc"
    __PRF_globalCounter[61u]++ ;

#line 24 "./TempProcessing.sc"
    while(1)
    {   

#line 968 "GreenhouseSpec.cc"
	__PRF_globalCounter[62u]++ ;
	__PRF_channelAccess(17257u, sizeof (h1));

#line 26 "./TempProcessing.sc"
	tempdatain.receive( &h1, sizeof (h1));

#line 975 "GreenhouseSpec.cc"
	__PRF_globalCounter[63u]++ ;

#line 28 "./TempProcessing.sc"
	if ((h1 - tempset) > ( -1.000000000000000e+00))

#line 981 "GreenhouseSpec.cc"
	{   
	    __PRF_globalCounter[64u]++ ;

#line 29 "./TempProcessing.sc"
	    command = 1;
	}
	else 

#line 990 "GreenhouseSpec.cc"
	{   
	    __PRF_globalCounter[65u]++ ;

#line 31 "./TempProcessing.sc"
	    command = 0;
	}

#line 998 "GreenhouseSpec.cc"
	__PRF_globalCounter[66u]++ ;
	__PRF_channelAccess(17130u, sizeof (command));

#line 33 "./TempProcessing.sc"
	tempdatacontrol.send( &command, sizeof (command));

#line 1005 "GreenhouseSpec.cc"
	__PRF_channelAccess(17131u, sizeof (h1));

#line 34 "./TempProcessing.sc"
	tempdataout.send( &h1, sizeof (h1));
    }
}

#line 1013 "GreenhouseSpec.cc"
Main::Main(unsigned int _idcnt)
    : _specc::class_type(_idcnt),
    _scc_const_port_0(10ul),
    _scc_const_port_1(10ul),
    _scc_const_port_2(10ul),
    _scc_const_port_3(10ul),
    _scc_const_port_4(10ul),
    _scc_const_port_5(10ul),
    _scc_const_port_6(10ul),
    CONT(_IDcnt, USER_SET, T_SENSE, M_SENSE, HEATER, SPRINKLER, T_OUT, M_OUT),
    HEATER(_scc_const_port_0),
    MTR(_IDcnt, HEATER, SPRINKLER, M_OUT, T_OUT),
    M_OUT(_scc_const_port_1),
    M_SENSE(_scc_const_port_2),
    SPRINKLER(_scc_const_port_3),
    STM(_IDcnt, USER_SET, M_SENSE, T_SENSE),
    T_OUT(_scc_const_port_4),
    T_SENSE(_scc_const_port_5),
    USER_SET(_scc_const_port_6)
{   /* nothing */
}

Main::~Main(void)
{   /* nothing */
}

int Main::main(void)

#line 35 "tb.sc"
{   

#line 1045 "GreenhouseSpec.cc"
    __PRF_startProfiler("GreenhouseSpec_bb_counter.prf", "GreenhouseSpec_fn_counter.prf", 
	__PRF_globalCounter, 67u);
    __PRF_globalCounter[9u]++ ;

#line 36 "tb.sc"
    { _specc::fork _scc_fork_0(&STM), _scc_fork_1(&CONT), _scc_fork_2(&MTR); _specc::par(
	    &_scc_fork_0, 
	    &_scc_fork_1, 
	    &_scc_fork_2, ((_specc::fork*)0));
    }

#line 1057 "GreenhouseSpec.cc"
    __PRF_globalCounter[10u]++ ;

#line 41 "tb.sc"
    return (0);
}

#line 1064 "GreenhouseSpec.cc"
Main _scc_main(_IDcnt);

int main(void)
{   
    int _scc_main_return;
    
    _specc::start();
    _scc_main_return = _scc_main.main();
    _specc::end();
    return(_scc_main_return);
}

void _scc_bit4_err_handle(
    const _bit4& bit4vec)
{   
    char temp_bits[1024], *p;
    p=bit2str(2,&temp_bits[1023], bit4vec);
    _specc::abort(
	"ERROR:\t Casting a bit4 vector failed \n"
	"Bit4 vector contains X/Z values %s\n"
	"Simulation aborted.\n", p);
	
}

//////////////////////////////////////////////////////////////////////
// End of file GreenhouseSpec.cc
//////////////////////////////////////////////////////////////////////
